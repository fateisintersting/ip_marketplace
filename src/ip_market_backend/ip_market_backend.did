type AttributeValue = variant { Text : text; Boolean : bool; Number : float64 };
type AuctionData = record {
  starting_price : nat64;
  auction_end : nat64;
  min_bid_increment : nat64;
  highest_bidder : opt principal;
  current_bid : nat64;
};
type CollectionStats = record {
  floor_price : opt nat64;
  average_price : opt nat64;
  collection_name : text;
  unique_owners : nat32;
  total_volume : nat64;
  total_supply : nat32;
};
type CreateUserRequest = record {
  bio : opt text;
  username : text;
  banner_url : opt text;
  avatar_url : opt text;
  email : opt text;
  social_links : vec SocialLink;
};
type FileMetadata = record {
  file_hash : text;
  file_name : text;
  file_url : text;
  file_size : nat64;
  file_type : text;
  uploaded_at : nat64;
};
type IPMarketplaceError = variant {
  AuctionEnded;
  InvalidInput;
  NFTNotTransferable;
  OperationFailed;
  FileTooLarge;
  NotFound;
  Unauthorized;
  AlreadyExists;
  NotImplemented;
  BidTooLow;
  InvalidFileFormat;
  InsufficientFunds;
};
type IPMetadata = record {
  tags : vec text;
  application_number : opt text;
  registration_number : opt text;
  file_hash : opt text;
  file_url : opt text;
  jurisdiction : text;
  genre : opt text;
  expiry_date : opt nat64;
  priority_date : opt nat64;
  category : text;
  color_palette : vec text;
  dimensions : opt text;
  software_used : vec text;
  medium : opt text;
};
type IPNft = record {
  id : text;
  creator : principal;
  royalty_percentage : nat8;
  token_id : nat64;
  owner : principal;
  rarity_score : opt float64;
  name : text;
  view_count : nat64;
  total_editions : opt nat32;
  description : text;
  edition_number : opt nat32;
  collection_name : opt text;
  metadata_uri : text;
  transfer_history : vec TransferRecord;
  is_transferable : bool;
  image : text;
  ip_id : text;
  rarity_rank : opt nat32;
  favorite_count : nat64;
  minted_at : nat64;
};
type IPType = variant {
  Patent;
  DigitalArt;
  TradeSecret;
  Software;
  Copyright;
  Music;
  Design;
  Literature;
  Other : text;
  Video;
  Trademark;
  Photography;
};
type IntellectualProperty = record {
  id : text;
  nft_id : opt text;
  title : text;
  creator : principal;
  registration_date : nat64;
  additional_files : vec FileMetadata;
  image_url : opt text;
  owner : principal;
  metadata : IPMetadata;
  description : text;
  verification_status : VerificationStatus;
  ip_type : IPType;
  creation_date : nat64;
};
type LicenseTerms = record {
  territory : opt text;
  duration : opt nat64;
  modification_rights : bool;
  exclusivity : bool;
  attribution_required : bool;
  commercial_use : bool;
  usage_rights : vec text;
};
type ListNFTRequest = record {
  nft_id : text;
  min_bid_increment : opt nat64;
  auction_duration : opt nat64;
  currency : text;
  is_auction : bool;
  price : nat64;
  expires_at : opt nat64;
  license_terms : opt LicenseTerms;
};
type ListingStatus = variant { Sold; Active; InAuction; Cancelled; Expired };
type MarketplaceListing = record {
  id : text;
  nft_id : text;
  status : ListingStatus;
  auction_data : opt AuctionData;
  seller : principal;
  currency : text;
  price : nat64;
  expires_at : opt nat64;
  license_terms : opt LicenseTerms;
  listed_at : nat64;
};
type MarketplaceStats = record {
  active_listings : nat32;
  active_auctions : nat32;
  total_users : nat32;
  total_nfts : nat32;
  average_sale_price : opt nat64;
  total_volume : nat64;
  total_listings : nat32;
};
type MintNFTRequest = record {
  royalty_percentage : opt nat8;
  external_url : opt text;
  animation_url : opt text;
  name : text;
  total_editions : opt nat32;
  description : text;
  edition_number : opt nat32;
  collection_name : opt text;
  attributes : vec NFTAttribute;
  image : text;
  ip_id : text;
  background_color : opt text;
};
type NFTAttribute = record {
  max_value : opt float64;
  trait_type : text;
  value : AttributeValue;
  display_type : opt text;
};
type NFTMetadata = record {
  creator : text;
  duration : opt nat64;
  token_id : text;
  external_url : opt text;
  animation_url : opt text;
  name : text;
  description : text;
  resolution : opt text;
  file_size : opt nat64;
  file_type : opt text;
  jurisdiction : opt text;
  blockchain : text;
  attributes : vec NFTAttribute;
  token_standard : text;
  minted_date : text;
  image : text;
  license_type : opt text;
  ip_type : text;
  background_color : opt text;
  ip_category : text;
  creation_date : text;
};
type NFTSearchFilters = record {
  sort_by : opt text;
  creator : opt principal;
  collection_name : opt text;
  max_price : opt nat64;
  min_price : opt nat64;
};
type RegisterIPRequest = record {
  title : text;
  additional_files : vec FileMetadata;
  image_url : opt text;
  metadata : IPMetadata;
  description : text;
  ip_type : IPType;
};
type Result = variant { Ok : bool; Err : IPMarketplaceError };
type Result_1 = variant { Ok : UserProfile; Err : IPMarketplaceError };
type Result_2 = variant { Ok : IntellectualProperty; Err : IPMarketplaceError };
type Result_3 = variant { Ok : IPNft; Err : IPMarketplaceError };
type Result_4 = variant {
  Ok : record { IPNft; NFTMetadata; IntellectualProperty };
  Err : IPMarketplaceError;
};
type Result_5 = variant { Ok : vec TransferRecord; Err : IPMarketplaceError };
type Result_6 = variant { Ok : NFTMetadata; Err : IPMarketplaceError };
type Result_7 = variant { Ok : nat64; Err : IPMarketplaceError };
type Result_8 = variant { Ok : MarketplaceListing; Err : IPMarketplaceError };
type Result_9 = variant { Ok : nat32; Err : IPMarketplaceError };
type SocialLink = record { url : text; platform : text };
type TransferRecord = record {
  to : principal;
  transaction_hash : opt text;
  from : principal;
  timestamp : nat64;
  price : opt nat64;
};
type UserProfile = record {
  bio : opt text;
  total_sales : nat64;
  "principal" : principal;
  verified : bool;
  owned_ips : vec text;
  username : text;
  banner_url : opt text;
  avatar_url : opt text;
  owned_nfts : vec text;
  created_at : nat64;
  email : opt text;
  total_purchases : nat64;
  reputation_score : nat32;
  social_links : vec SocialLink;
};
type VerificationStatus = variant { UnderReview; Rejected; Verified; Pending };
service : () -> {
  buy_nft : (text) -> (Result);
  cancel_listing : (text) -> (Result);
  create_user_profile : (CreateUserRequest) -> (Result_1);
  get_ip_by_id : (text) -> (Result_2) query;
  get_listings_by_seller : (principal) -> (vec MarketplaceListing) query;
  get_marketplace_listings : () -> (vec MarketplaceListing) query;
  get_marketplace_stats : () -> (MarketplaceStats) query;
  get_my_profile : () -> (Result_1) query;
  get_nft_by_id : (text) -> (Result_3) query;
  get_nft_collection_stats : (text) -> (CollectionStats) query;
  get_nft_full_details : (text) -> (Result_4) query;
  get_nft_history : (text) -> (Result_5) query;
  get_nft_metadata : (text) -> (Result_6) query;
  get_nfts_batch : (vec text) -> (vec opt IPNft) query;
  get_trending_nfts : (nat64) -> (vec IPNft) query;
  get_user_ips : (principal) -> (vec IntellectualProperty) query;
  get_user_nfts : (principal) -> (vec IPNft) query;
  get_user_profile : (principal) -> (Result_1) query;
  increment_nft_view : (text) -> (Result_7);
  list_nft_for_sale : (ListNFTRequest) -> (Result_8);
  mint_ip_nft : (MintNFTRequest) -> (Result_3);
  place_bid : (text, nat64) -> (Result);
  register_ip : (RegisterIPRequest) -> (Result_2);
  search_ips : (text, opt IPType) -> (vec IntellectualProperty) query;
  search_nfts : (text, NFTSearchFilters) -> (vec IPNft) query;
  toggle_nft_favorite : (text) -> (Result_7);
  transfer_nft : (text, principal) -> (Result);
  update_user_reputation : (principal, int32) -> (Result_9);
  verify_ip : (text, VerificationStatus) -> (Result);
}
